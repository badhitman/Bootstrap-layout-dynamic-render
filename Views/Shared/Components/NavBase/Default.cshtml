@*© https://github.com/badhitman - @fakegov*@
@using BootstrapViewComponentsRazorLibrary.Service.bootstrap
@using BootstrapViewComponentsRazorLibrary.Components.html
@using BootstrapViewComponentsRazorLibrary.Components.bootstrap.navs
@model AbstractNavManager
@if (!string.IsNullOrEmpty(Model.Before_coment_block))
{
    await Component.InvokeAsync(typeof(HtmlCommentViewComponent).Name, new { MessageComment = Model.Before_coment_block });
}
@{
    string ViewComponentName = Model.NavWrapperType == BootstrapViewComponentsRazorLibrary.Models.NavWrapperTypesEnum.ul ? typeof(NavWrapUL).Name : typeof(NavWrapNAV).Name;
}
@await Component.InvokeAsync(ViewComponentName, new { navManager = Model, SetPillsTheme = ViewBag.IsPillsTheme })
@if (Model is NavJavaScriptBehaviorManager)
{
    NavJavaScriptBehaviorManager NavJavaScriptBehavior = Model as NavJavaScriptBehaviorManager;
    string fade_style = NavJavaScriptBehavior.IsFadeStyle ? " fade" : string.Empty;
    @:<div class="tab-content" id="@Model.Id_DOM-TabContent">
        string set_first_tab_as_active = " show active";
        foreach (KeyValuePair<string, string> kvp in NavJavaScriptBehavior.CacheContents)
        {
            <div class="tab-pane @fade_style@set_first_tab_as_active" id="@kvp.Key" role="tabpanel" aria-labelledby="@kvp.Key-tab">@kvp.Value</div>
            set_first_tab_as_active = string.Empty;
        }
    @:</div>
}
@if (!string.IsNullOrEmpty(Model.After_coment_block))
{
    await Component.InvokeAsync(typeof(HtmlCommentViewComponent).Name, new { MessageComment = Model.After_coment_block });
}