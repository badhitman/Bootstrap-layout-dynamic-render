@*© https://github.com/badhitman - @fakegov*@
@using BootstrapViewComponentsRazorLibrary.Service
@using BootstrapViewComponentsRazorLibrary.Components.bootstrap.navbar
@using BootstrapViewComponentsRazorLibrary.Service.bootstrap.navbar
@model NavbarManager
@{
    //string SetBrandHeader, string SetBrandHref, string SetBrandImgSrc
}
<nav class="@Model.StringCSS" @Html.Raw(Model.StringAttributes)>
    @if (Model.NavbarBrand.NavbarBrandPosition == BootstrapViewComponentsRazorLibrary.Models.bootstrap.navbar.NavbarBrandPositioningEnum.Left)
    {
        @await Component.InvokeAsync(typeof(NavbarBrand).Name, new { SetBrandHeader = Model.NavbarBrand.NavbarBrandDom?.Header, SetBrandHref = Model.NavbarBrand.NavbarBrandDom?.Href, SetBrandImgSrc = Model.NavbarBrand.ImageNavbarBrandSrc })
    }
    @if (Model.NavbarBody != null)
    {
        @await Component.InvokeAsync(typeof(NavbarToggler).Name, new { SetObjectManager = new NavbarTogglerManager() { TargetName = Model.CollapseTarget } })
    }
    @if (Model.NavbarBrand.NavbarBrandPosition == BootstrapViewComponentsRazorLibrary.Models.bootstrap.navbar.NavbarBrandPositioningEnum.Right)
    {
        @await Component.InvokeAsync(typeof(NavbarBrand).Name, new { SetBrandHeader = Model.NavbarBrand.NavbarBrandDom?.Header, SetBrandHref = Model.NavbarBrand.NavbarBrandDom?.Href, SetBrandImgSrc = Model.NavbarBrand.ImageNavbarBrandSrc })
    }
    @if (Model.NavbarBody != null)
    {
        @if (Model.NavbarBody.IsHidesCollapse)
        {
            <div class="collapse navbar-collapse" id="@Model.CollapseTarget">
                @if (Model.NavbarBrand.NavbarBrandPosition == BootstrapViewComponentsRazorLibrary.Models.bootstrap.navbar.NavbarBrandPositioningEnum.Hides)
                {
                    @await Component.InvokeAsync(typeof(NavbarBrand).Name, new { SetBrandHeader = Model.NavbarBrand.NavbarBrandDom?.Header, SetBrandHref = Model.NavbarBrand.NavbarBrandDom?.Href, SetBrandImgSrc = Model.NavbarBrand.ImageNavbarBrandSrc })
                }
                @await Component.InvokeAsync(typeof(NavbarBody).Name, new { SetObjectManager = Model.NavbarBody })
            </div>
        }
        else
        {
            @await Component.InvokeAsync(typeof(NavbarBody).Name, new { SetObjectManager = Model.NavbarBody })
        }
    }
</nav>