@*MIT License (https://github.com/badhitman)*@
@using BootstrapAspDynamicRender.components
@using BootstrapAspDynamicRender.service
@using BootstrapAspDynamicRender.models
@model bsModal
@{
    string HeaderDomId = Model.ID + "-ModalLabel";

}
<div @Html.Raw(Model.GetStringAttributes()) role="dialog" aria-labelledby="@HeaderDomId" aria-hidden="true">
    @{
        string css_class_modal_dialog = "modal-dialog";
        if (Model.MaxModalSize != bmModalSizesEnum.Default)
        {
            css_class_modal_dialog += " modal-" + Model.MaxModalSize.ToString();
        }
        if (Model.IsModalDialogScrollable)
        {
            css_class_modal_dialog += " modal-dialog-scrollable";
        }
        if (Model.IsVerticallyСentered)
        {
            css_class_modal_dialog += " modal-dialog-centered";
        }
    }
    <div class="@css_class_modal_dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="@HeaderDomId">@Html.Raw(Model.Header)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @await Component.InvokeAsync(typeof(hrUniversalList).Name, new { SetObjectManager = Model })
            </div>
            @if (Model.FooterExtButtons.Count > 0)
            {
                <div class="modal-footer">
                    @foreach (bsButton button in Model.FooterExtButtons)
                    {
                        @await Component.InvokeAsync(button.ViewComponentName, new { SetObjectManager = button })
                    }
                </div>
            }
        </div>
    </div>
</div>
