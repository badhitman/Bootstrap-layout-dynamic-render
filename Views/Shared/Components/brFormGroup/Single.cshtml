@*MIT License (https://github.com/badhitman)*@
@using BootstrapAspDynamicRender.service
@using BootstrapAspDynamicRender.components
@using BootstrapAspDynamicRender.models
@model bsFormGroupSingle
@{
    hsLabelInput label = new hsLabelInput() { Header = Model.CustomInput.Label, For = Model.CustomInput.Input.ID };

    if (Model.CustomInput.LabelSrOnly)
    {
        label.AddCSS("sr-only");
    }

    string HelpCaptionId = Model.CustomInput.Input.ID + "-" + nameof(Model.CustomInput.HelpCaption);

    if (!string.IsNullOrWhiteSpace(Model.CustomInput.HelpCaption))
    {
        Model.CustomInput.Input.SetAttribute("aria-describedby", HelpCaptionId);
    }
}
<div @Html.Raw(Model.GetStringAttributes())>
    @if (Model.CustomInput.Input.GetType().IsSubclassOf(typeof(ahsCheckedInputs)))
    {
        Model.CustomInput.Input.RemoveCSS(delegate (string x) { return x.ToLower().StartsWith("form-control"); });

        Model.CustomInput.Input.AddCSS("form-check-input");
        if (!string.IsNullOrWhiteSpace(label.Header))
        {
            label.AddCSS("form-check-label");
            Model.CustomInput.Input.RemoveCSS("position-static");
        }
        else
        {
            Model.CustomInput.Input.AddCSS("position-static");
            label.RemoveCSS("form-check-label");
        }

        if (Model.IsHorisontal)
        {
            if (!string.IsNullOrWhiteSpace(label.Header))
            {
                label.AddCSS("col-sm-2 col-form-label");

                @await Component.InvokeAsync(label.ViewComponentName, new { SetObjectManager = label })
            }
            else
            {
                <div class="col-sm-2"> </div>
            }

            <div class="col-sm-10">
                <div class="form-check">
                    @await Component.InvokeAsync(Model.CustomInput.Input.ViewComponentName, new { SetObjectManager = Model.CustomInput.Input })
                </div>
                @await Component.InvokeAsync(nameof(brValidationFeedback), new { SetMessageValidFeedback = Model.CustomInput.ValidFeedback, SetMessageInvalidFeedback = Model.CustomInput.InvalidFeedback });
                @if (!string.IsNullOrWhiteSpace(Model.CustomInput.HelpCaption))
                {
                    <small id="@HelpCaptionId" class="text-muted">@Model.CustomInput.HelpCaption</small>
                }
            </div>
        }
        else
        {
            label.RemoveCSS("col-sm-2 col-form-label");

            @await Component.InvokeAsync(Model.CustomInput.Input.ViewComponentName, new { SetObjectManager = Model.CustomInput.Input })
            if (!string.IsNullOrWhiteSpace(label.Header))
            {
                @await Component.InvokeAsync(label.ViewComponentName, new { SetObjectManager = label })
            }
            @await Component.InvokeAsync(nameof(brValidationFeedback), new { SetMessageValidFeedback = Model.CustomInput.ValidFeedback, SetMessageInvalidFeedback = Model.CustomInput.InvalidFeedback });

            if (!string.IsNullOrWhiteSpace(Model.CustomInput.HelpCaption))
            {
                <small id="@HelpCaptionId" class="text-muted">@Model.CustomInput.HelpCaption</small>
            }
        }
    }
    else
    {
        Model.CustomInput.Input.RemoveCSS("form-check-input");

        string input_class = "form-control";
        if (!Model.CustomInput.Input.ReadCSS().Any(x => x.StartsWith(input_class)))
        {
            if (Model.CustomInput.Input is hsInputFile)
            {
                input_class += "-file";
            }
            else if (Model.CustomInput.Input is hsInputRange)
            {
                input_class += "-range";
            }

            Model.CustomInput.Input.AddCSS(input_class);
        }

        if (Model.IsHorisontal)
        {
            if (!string.IsNullOrWhiteSpace(label.Header))
            {
                label.AddCSS("col-sm-2 col-form-label");
                if (Model.CustomInput.SizeInput != bmTwinSizingsEnum.NULL)
                {
                    label.AddCSS("col-form-label-" + Model.CustomInput.SizeInput.ToString().ToLower());
                }
                @await Component.InvokeAsync(label.ViewComponentName, new { SetObjectManager = label })
            }
            else
            {
                <div class="col-sm-2"> </div>
            }
            <div class="col-sm-10">
                @if (Model.CustomInput.SizeInput != bmTwinSizingsEnum.NULL)
                {
                    Model.CustomInput.Input.AddCSS("form-control-" + Model.CustomInput.SizeInput.ToString().ToLower());
                }
                @await Component.InvokeAsync(Model.CustomInput.Input.ViewComponentName, new { SetObjectManager = Model.CustomInput.Input })
                @await Component.InvokeAsync(nameof(brValidationFeedback), new { SetMessageValidFeedback = Model.CustomInput.ValidFeedback, SetMessageInvalidFeedback = Model.CustomInput.InvalidFeedback })
                @if (!string.IsNullOrWhiteSpace(Model.CustomInput.HelpCaption))
                {
                    <small id="@HelpCaptionId" class="text-muted">@Model.CustomInput.HelpCaption</small>
                }
            </div>
        }
        else
        {
            label.RemoveCSS("col-sm-2 col-form-label");
            if (!string.IsNullOrWhiteSpace(label.Header))
            {
                @await Component.InvokeAsync(label.ViewComponentName, new { SetObjectManager = label })
            }
            @await Component.InvokeAsync(Model.CustomInput.Input.ViewComponentName, new { SetObjectManager = Model.CustomInput.Input })
            @await Component.InvokeAsync(nameof(brValidationFeedback), new { SetMessageValidFeedback = Model.CustomInput.ValidFeedback, SetMessageInvalidFeedback = Model.CustomInput.InvalidFeedback });
            if (!string.IsNullOrWhiteSpace(Model.CustomInput.HelpCaption))
            {
                <small id="@HelpCaptionId" class="text-muted">@Model.CustomInput.HelpCaption</small>
            }
        }
    }
</div>